import { assert } from 'chai';
import { useEnvironment } from './helpers';
import { TASK_VERIFY_GET_ARTIFACT } from '../src/constants';
import { getCacheResolvedFileInformation } from '../src/plugin';

describe('verify plugin', async function () {
    const sourceName: string = 'contracts/Greeter.vy';
    const contractName: string = 'Greeter';
    const testnetVerifyURL = 'https://zksync2-testnet-explorer.zksync.dev/contract_verification';

    describe('Testnet verifyURL extraction from config', async function () {
        useEnvironment('localGreeter', 'testnet');

        it('Reads verifyURL form network config for existing network ', async function () {
            assert.equal(this.env.network.verifyURL, testnetVerifyURL);
        });
    });

    describe('Unknown verifyURL in config', async function () {
        useEnvironment('localGreeter', 'customNetwork');

        it('Checks impoting deafault verifyURL when it does not exist in the config ', async function () {
            assert.equal(this.env.network.verifyURL, testnetVerifyURL);
        });
    });

    describe('Artifact cache information', async function () {
        useEnvironment('localGreeter', 'testnet');

        it('Verifies contract withot provided source name', async function () {
            const deployedBytecode = "0x0002000000000002000100000001035500000000030100190000006003300270000000220030019d000000220330019700000001022001900000004a0000c13d000000040230008c000000810000413d000000000101043b00000024011001970000000002000416000000000202004b000000810000c13d000000250110009c000000810000c13d0000002001000039000000400010043f000000000300041a000000600030043f0000001f01300039000000200210008c000000220000413d00000005011002700000000002000019000000050320021000000080033000390000000102200039000000000402041a0000000000430435000000000312004b0000001a0000413d000000600300043d00000000010000310000000102100367000000800130003900000000033000490000001f0330018f000000000400004b000000320000613d000000000400001900000005054002100000000006510019000000000552034f000000000505043b00000000005604350000000104400039000000000504004b0000002a0000413d000000000403004b0000003f0000613d0000000303300210000000000401043300000000043401cf000000000434022f00000100033000890000000002200350000000000202043b000000000232022f00000000023201cf000000000242019f0000000000210435000000600100043d00000000021000490000001f0220018f000000000121001900000040011000390000002202000041000000220310009c0000000001028019000000600110021000000026011001c7000000840001042e000000000201043b000000000121034f000000000301043b000000650130008c000000810000813d0000001f0130018f000000400030043f0000002002200039000000010220036700000005033002720000005e0000613d00000000040000190000000505400210000000000652034f000000000606043b000000600550003900000000006504350000000104400039000000000534004b000000560000413d000000000401004b0000006d0000613d0000000503300210000000000232034f00000003011002100000006003300039000000000403043300000000041401cf000000000414022f000000000202043b0000010001100089000000000212022f00000000011201cf000000000141019f0000000000130435000000400100043d000000000010041b0000001f01100039000000200210008c0000007c0000413d000000050110027000000000020000190000000103200039000000050220021000000060022000390000000002020433000000000023041b000000000213004b0000000002030019000000740000413d0000002001000039000001000010044300000120000004430000002301000041000000840001042e000000000100001900000085000104300000008300000432000000840001042e00000085000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000cfae321700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000006cdf804c4272f5a6d4a4e87dd9cb35045cb9816ea3f260fbbe5f60f419cfd010";
            const artifact = await this.env.run(TASK_VERIFY_GET_ARTIFACT, { contractFQN: undefined, deployedBytecode });
        
            const { resolvedFile, contractCache } = await getCacheResolvedFileInformation(sourceName, artifact, this.env);
            
            assert.equal(resolvedFile.sourceName, sourceName);
            assert.equal(contractCache.sourceName, sourceName);
            assert.equal(contractCache.vyperConfig.version, '0.3.3');
        });
    });
});
